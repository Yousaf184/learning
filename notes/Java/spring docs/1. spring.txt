Inversion of control:
=====================
The Inversion-of-Control (IoC) pattern, is about providing any kind of callback, which "implements" and/or controls reaction, instead of acting ourselves directly (in other words, inversion and/or redirecting control to the external handler/controller).

The Dependency-Injection (DI) pattern is a more specific version of IoC pattern, and is all about removing dependencies from your code.

Every DI implementation can be considered IoC, but one should not call it IoC, because implementing Dependency-Injection is harder than callback (Don't lower your product's worth by using the general term "IoC" instead).

To clarify a little: Inversion of Control means anything which inverts the control structure of a program from the classic procedural design.

Inversion of control from Martin Fowler:
----------------------------------------
(Article link: http://www.martinfowler.com/articles/injection.html)

When these containers talk about how they are so useful because they implement "Inversion of Control" I end up very puzzled. Inversion of control is a common characteristic of frameworks, so saying that these lightweight containers are special because they use inversion of control is like saying my car is special because it has wheels.

The question, is what aspect of control are they inverting? When I first ran into inversion of control, it was in the main control of a user interface. Early user interfaces were controlled by the application program. You would have a sequence of commands like "Enter name", "enter address"; your program would drive the prompts and pick up a response to each one. With graphical (or even screen based) UIs the UI framework would contain this main loop and your program instead provided event handlers for the various fields on the screen. The main control of the program was inverted, moved away from you to the framework.

As a result I think we need a more specific name for this pattern. Inversion of Control is too generic a term, and thus people find it confusing. As a result with a lot of discussion with various IoC advocates we settled on the name Dependency Injection.





Dependency Injection:
=====================
It is a process in which objects define their dependencies and the container injects those dependencies when it create the bean. It is the inverse of object controlling the construction of its dependencies through direct construction of classes or through service locator pattern. Hence, the name, Inversion of control.

Two major variants of dependency injection:
-------------------------------------------
- Constructor-based
- Setter-based

Constructor-based Dependency Injection:
---------------------------------------
It is when the container invokes a constructor, supplying the dependencies as arguments to the constructor. Calling a static factory method with the arguments to construct a bean is also similar.

Setter-based Dependency Injection:
----------------------------------
It is when the container invokes setter methods on a bean to inject dependencies after invoking the default (no argument) constructor or a no-argument factory method to construct the bean.

Constructor vs setter injection:
--------------------------------
Good rule of thumb: use constructor-based injection for mandatory dependencies and setter-based injection for optional dependencies. In general, prefer constructor-based injection with validation of arguments.

Dependency Resolution:
----------------------
Spring container validates bean configuration as the container is created. Bean properties are not set until the bean is created. Beans with Singleton scope are created when the container is created. Beans with other scopes are only created when they are requested.

Method injection:
-----------------
If a singleton bean requires another singleton bean or a non-singleton bean requires non-singleton bean, then spring has no issue in providing the required bean.
Problem arises when a singleton bean requires non-singleton bean. Singleton bean is only created once, so spring has only once change to inject the dependencies.
Method injection is a technique that allows us to get a non-singleton bean from the container every time it is required, for example, on a method invocation in the singleton bean.












